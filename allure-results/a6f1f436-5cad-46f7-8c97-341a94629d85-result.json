{"name": "test_order_detail_modal", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_orders_feed.TestOrdersFeed object at 0x000001DA00F2ECC0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"856a89938f55b32956c7e9ea77a58a65\")>\n\n    @allure.story(\"Открытие модального окна заказа\")\n    def test_order_detail_modal(self, driver):\n        driver.get(login_url)\n        login = LoginPage(driver)\n        #driver.get(feed_url)\n        login.login_user(\"pavel18899prac@ya.ru\", \"Hgr06m_434yf\")\n        profile = ProfilePage(driver)\n        profile.go_to_profile()\n        profile.wait_for_element(ProfilePageLocators.PROFILE_LOC)\n        profile.go_to_order_history()\n        feed = OrdersFeedPage(driver)\n        feed.open_order_detail()\n>       feed.wait_for_element(OrdersFeedPageLocators.ORDER_STATUS_TEXT)\n\ntests\\test_orders_feed.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:43: in wait_for_element\n    return self.wait.until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"856a89938f55b32956c7e9ea77a58a65\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001DA00F936A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "steps": [{"name": "Ввод email: 'pavel18899prac@ya.ru'", "status": "passed", "parameters": [{"name": "email", "value": "'pavel18899prac@ya.ru'"}], "start": 1748085531482, "stop": 1748085531545}, {"name": "Ввод пароля", "status": "passed", "parameters": [{"name": "password", "value": "'Hgr06m_434yf'"}], "start": 1748085531545, "stop": 1748085531590}, {"name": "Нажатие на кнопку 'Войти'", "status": "passed", "start": 1748085531590, "stop": 1748085531626}, {"name": "Клик по кнопке 'Личный кабинет'", "status": "passed", "start": 1748085531626, "stop": 1748085532111}, {"name": "Клик по кнопке 'История заказов'", "status": "passed", "start": 1748085532627, "stop": 1748085532661}, {"name": "Открытие деталей заказа", "status": "passed", "start": 1748085532661, "stop": 1748085533710}], "start": 1748085530918, "stop": 1748085543863, "uuid": "4d8a5a3a-6583-4a28-8efa-45f1dcc39119", "historyId": "a6b48dbe86ca37a544f11e55fefaf9df", "testCaseId": "a6b48dbe86ca37a544f11e55fefaf9df", "fullName": "tests.test_orders_feed.TestOrdersFeed#test_order_detail_modal", "labels": [{"name": "feature", "value": "Лента заказов"}, {"name": "story", "value": "Открытие модального окна заказа"}, {"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders_feed"}, {"name": "subSuite", "value": "TestOrdersFeed"}, {"name": "host", "value": "DESKTOP-05J7DPF"}, {"name": "thread", "value": "22812-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders_feed"}]}